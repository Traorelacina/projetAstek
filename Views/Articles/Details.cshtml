@using WebApplication1.Models
@using Microsoft.AspNetCore.Mvc.Rendering
@model WebApplication1.Models.Article

@{
    ViewData["Title"] = "Détails de l'article";
}

<style>
    .article-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .article-title {
        font-size: 2.5rem;
        color: #2d3748;
        margin-bottom: 1.5rem;
        font-weight: 700;
        border-bottom: 3px solid #4299e1;
        padding-bottom: 0.5rem;
    }

    .article-content {
        font-size: 1.1rem;
        line-height: 1.8;
        color: #4a5568;
        margin-bottom: 2rem;
    }

    .article-meta {
        color: #718096;
        font-style: italic;
        margin-bottom: 2rem;
    }

    .image-container {
        margin: 2rem 0;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .image-container img {
        width: 100%;
        height: auto;
        object-fit: cover;
    }

    .likes-section {
        margin: 2rem 0;
        padding: 1rem;
        background-color: #f7fafc;
        border-radius: 8px;
    }

    #like-button {
        background-color: #4299e1;
        border: none;
        padding: 0.5rem 1.5rem;
        border-radius: 25px;
        transition: all 0.3s ease;
    }

    #like-button:hover {
        background-color: #3182ce;
        transform: translateY(-2px);
    }

    #likes-count {
        margin-left: 1rem;
        font-weight: 600;
        color: #2d3748;
    }

    .comments-section {
        margin-top: 3rem;
    }

    .comments-title {
        font-size: 1.8rem;
        font-weight: 600;
    }

    .comment {
        margin: 1.5rem 0;
        padding: 1rem;
        background-color: #edf2f7;
        border-radius: 8px;
    }

    .comment-author {
        font-weight: 600;
        color: #2d3748;
    }

    .comment-content {
        font-size: 1rem;
        color: #4a5568;
        margin-top: 0.5rem;
    }
</style>


<div class="article-container">
    <!-- Titre de l'article -->
    <div class="article-title">
        @Model.Title
    </div>

    <!-- Métadonnées de l'article -->
    <div class="article-meta">
        @Model.AuthorFirstName | @Model.CreatedAt.ToLocalTime().ToString("dd MMM yyyy")
    </div>

    <!-- Contenu de l'article -->
    <div class="article-content">
        @Model.Content
    </div>

    <!-- Image de l'article (si disponible) -->
    @if (!string.IsNullOrEmpty(Model.ImagePath))
    {
        <div class="image-container mb-4">
            <img src="@Model.ImagePath" alt="Image de l'article" class="img-fluid">
        </div>
    }

    <!-- Section des Likes -->
    <div class="likes-section">
        <button id="like-button" onclick="toggleLike('@Model.Id')">J'aime</button>
        <span id="likes-count">@Model.LikesCount</span>
    </div>

    <!-- Section des commentaires -->
    <div class="comments-section mt-4">
        <h4>Commentaires</h4>

        <!-- Affichage des commentaires -->
        <div id="comments-container">
            @Html.Partial("~/Views/Articles/Partial/Comments.cshtml", Model.Comments)
        </div>

        <!-- Formulaire d'ajout de commentaire -->
        <form id="comment-form" method="post" action="@Url.Action("AddComment", "Articles")" onsubmit="submitComment(event)">
            @Html.AntiForgeryToken()
            <input type="hidden" name="articleId" value="@Model.Id" />
            <textarea id="comment-content" name="content" placeholder="Ajouter un commentaire..." class="form-control mb-3" rows="3" required></textarea>
            <button type="submit" class="btn btn-primary">Envoyer</button>
        </form>
    </div>
</div>

<script>
    async function submitComment(event) {
        event.preventDefault();

        const form = document.getElementById('comment-form');
        const content = document.getElementById('comment-content').value;
        const articleId = form.querySelector('input[name="articleId"]').value;
        const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

        const response = await fetch(form.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `articleId=${articleId}&content=${encodeURIComponent(content)}`
        });

        if (response.ok) {
            const commentsHtml = await response.text();
            document.getElementById('comments-container').innerHTML = commentsHtml;
            form.reset();
        } else {
            console.error('Erreur lors de l\'envoi du commentaire');
        }
    }

    function toggleLike(articleId) {
        // Récupérer le token anti-forgery
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(`/Articles/ToggleLike`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `articleId=${articleId}`
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Mettre à jour le compteur de likes
            const likeCount = document.querySelector("#likes-count");
            likeCount.textContent = data.likesCount;
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
</script>
